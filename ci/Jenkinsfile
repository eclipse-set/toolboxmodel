String branchName = env.BRANCH_NAME.replaceAll('/', '%252F')
pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/kubernetes.yaml'
    }
  }

  triggers {
    upstream threshold: hudson.model.Result.UNSTABLE, upstreamProjects: (BRANCH_NAME == 'main' ? 'model/main' : '')
  }

  options {
    timeout(time: 20, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage('Update Branch Target') {
      when {
        expression { 
          return BRANCH_NAME != 'main' 
        }
      }

      steps {
          script { 
          def lastSuccessfulBuildPath = "https://ci.eclipse.org/set/job/Model/job/${branchName}/lastSuccessfulBuild/artifact/java/bundles/org.eclipse.set.model.releng.repository/target/org.eclipse.set.model.repository-2.1.0-SNAPSHOT.zip"
          downloadFile file: 'org.eclipse.set.model.repository-2.1.0-SNAPSHOT.zip', url: "${lastSuccessfulBuildPath}"
          
          if (fileExists('org.eclipse.set.model.repository-2.1.0-SNAPSHOT.zip')) {
            sh "sed -i 's|https://download.eclipse.org/set/nightly/main/p2/model/|jar:file:///${WORKSPACE}/org.eclipse.set.model.repository-2.1.0-SNAPSHOT.zip!|g' java/bundles/org.eclipse.set.toolboxmodel.releng.target/org.eclipse.set.toolboxmodel.releng.target.target"
          }
        }
        
        
      }
    }

    stage('Build') {
      steps {
        container('maven') {
          mvn goal: 'clean verify -P sign', dependencies: 'dependencies/maven.deps'
          archiveArtifacts 'java/bundles/org.eclipse.set.toolboxmodel.repository/target/*.zip'
        }
      }
    }

    stage('Process Licenses') {
      steps {
        container('maven') {
          collectDependencies()
        }
      }
    }

    stage('Deploy Snapshot') {
      when {
        anyOf {
          buildingTag()
          branch 'main'
          branch pattern: 'release/[0-9.]+', comparator: 'REGEXP'
        }
      }

      steps {
        deployP2Site name: 'toolboxmodel', branch: BRANCH_NAME, path: 'java/bundles/org.eclipse.set.toolboxmodel.repository/target/repository'
      }
    }
  }

  post {
    always {
      // Publish JUnit test result
      junit testResults: 'java/bundles/*/target/surefire-reports/*.xml', allowEmptyResults: true
      handleIssues()
    }
  }
}
